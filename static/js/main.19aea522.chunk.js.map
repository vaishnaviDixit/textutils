{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","aria-checked","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","msg","SpeechSynthesisUtterance","window","speechSynthesis","speak","toogle","textContent","innerHTML","cancel","length","defaultProps","aboutText","Alert","alert","word","lower","charAt","slice","capitalize","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.19aea522.chunk.js","sourcesContent":["//type rfc for react fn based component line 2-9\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from 'react-router-dom';\r\n//props kya hai apne  components jo bnaye for ex navbar usme kuch cheeze pass krna chahte hai as variable\r\n//line18,22 to use router jha a hai wha link to use krenge \r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            {/*<Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>*/}\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n          </li>\r\n          {/*<li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n  </li>*/}\r\n          \r\n        </ul>\r\n        {/*<form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n  </form> */}\r\n  <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" aria-checked=\"false\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\n//PropTypes k p small as camelcase\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,//undefined n ho dalna hi hai title\r\n  aboutText: PropTypes.string\r\n}\r\n// konsi value suse kre agar kuch pass nhi kiya jaye to is default props\r\nNavbar.defaultProps ={\r\n  title: \"set title here\",\r\n  aboutText: \"About\"\r\n};","// type rfc recat k fn based component\r\nimport React, {useState}from 'react'\r\n\r\n//usestate is react hook STATE jha p line 6 m text hmara text hoga or setetxt ek fn jo is text ki state ko update krega\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        //console.log(\"uppercase was clicked\"+ text);\r\n        let newText=text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\",\"success\");\r\n    }\r\n    const handlelowClick = ()=>{\r\n        //console.log(\"uppercase was clicked\"+ text);\r\n        let newText=text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase!\",\"success\");\r\n    }\r\n    const handleclearClick = ()=>{\r\n        //console.log(\"uppercase was clicked\"+ text);\r\n        let newText=\"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared\",\"success\");\r\n \r\n    }\r\n    const speak = () => {\r\n        let msg = new SpeechSynthesisUtterance(text);\r\n        window.speechSynthesis.speak(msg);\r\n        const toogle = document.getElementById('toggle')\r\n        if (toogle.textContent === \"Speak\") {\r\n            toogle.innerHTML = \"Stop\"\r\n        }\r\n        else {\r\n            toogle.innerHTML = \"Speak\"\r\n            if (toogle.innerHTML === \"Speak\"){\r\n                window.speechSynthesis.cancel()\r\n            }\r\n        }\r\n        props.showAlert(\"This app is created by vaishnavi Dixit\",\"success\");\r\n \r\n    }\r\n    const handleExtraSpaces =()=> {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Removed Extra Spaces!\",\"success\");\r\n \r\n    }\r\n    const handleCopy =()=> {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copied to clipboard\",\"success\");\r\n \r\n    }\r\n    const handleOnChange = (event)=>{\r\n        \r\n        setText(event.target.value)\r\n    }\r\n    const [text, setText] = useState(\"\");\r\n    \r\n  return (\r\n    <>\r\n    <div className='container'style={{color: props.mode==='dark'?'white': '#042743'}}>\r\n\r\n<h1>{props.heading}</h1>\r\n<div className=\"mb-3\">\r\n   <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey': 'white' ,color: props.mode==='dark'?'white': '#042743'}} id=\"myBox\" rows=\"8\"></textarea>\r\n</div>\r\n<button className='btn btn-primary mx-1' onClick={handleUpClick}>Convert uppercase</button>\r\n<button className='btn btn-primary mx-1' onClick={handlelowClick}>Convert Lowercase</button>\r\n<button className='btn btn-primary mx-1' onClick={handleclearClick}>Clear Text</button>\r\n<button className='btn btn-primary mx-1' onClick={handleCopy}>Copy Text</button>\r\n<button className='btn btn-primary mx-1' onClick={handleExtraSpaces}>Remove Extra Space</button>\r\n\r\n<button type=\"submit\" onClick={speak} className=\"btn btn-warning mx-2 my-2\" id=\"toggle\">Speak</button>\r\n\r\n    </div>\r\n    <div className='container my-3' style={{color: props.mode==='dark'?'white': '#042743'}}>\r\n        <h1>Your text summary</h1>\r\n        <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n        <p>{0.008*text.split(\" \").length}Minutes read</p>\r\n        <h3>Preview</h3>\r\n        <p>{text.length>0?text:\"Enter something above to Preview it here\" }</p>\r\n\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n   </div>\r\n  )\r\n}\r\n\r\nexport default Alert","\nimport React, { useState } from 'react';\nimport './App.css';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\n//import {\n // BrowserRouter as Router,\n // Routes,\n // Route,\n \n//} from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setMode]= useState('light');\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message,type)=>{\n         setAlert(\n          {\n            msg:message,\n            type:type\n          }\n         )\n         setTimeout(() => {\n          setAlert(null);\n         }, 1500);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor ='#042743';\n      showAlert(\"Dark mode is enabled\",\"success\");\n      document.title=\"TextUtils-Dark Mode\" ;\n\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor ='white';\n      showAlert(\"Light mode is enabled\",\"success\");   \n    } \n  }\n\n  return (\n    //from here jsx start html jisne js k mukut phna hai also ye sirf ek html element allow krti hai for ex div also agar for use krna hai to htmlFor in camel case className= className\n    //<> </> jsx fragment so that it considers as single element\n    //jha jha js k use krna hai waha {} k use krenge ex h1 heading m variable name resolve hua using{}\n    //babel compiles jsx\n    //errors aa ri to closing tag lgao waha\n    //class ko replace kro className se\n    // jb simple aise component likh de iska matlab default props ki value use krega <Navbar/>  \n    //hm ek component ko pas kr sakte hai proporties un proporties k sath wo component apne ap ko render krega is case m bheja text or about in navbar component \n    //my-3 spacing in y axis bootstrap class\n  <>\n {/*<Router>*/} \n<Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/> \n<Alert alert={alert}/>\n<div className=\"container  my-3\">\n{/*<Routes>\n          <Route exact path=\"/about\" element={<About />}>\n            \n          </Route>\n          \n          <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>}>\n\n          \n          </Route>\n  </Routes>*/}\n  <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n</div>\n{/*</Router>*/}\n\n\n \n  </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}